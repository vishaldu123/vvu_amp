<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Page extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Page_model');
    } 

    /*
     * Listing of page
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('page/index?');
        $config['total_rows'] = $this->Page_model->get_all_page_count();
        $this->pagination->initialize($config);

        $data['page'] = $this->Page_model->get_all_page($params);
        
        $data['_view'] = 'page/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new page
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('title','Title','required');
		$this->form_validation->set_rules('alias','Alias','required|is_unique[alias]');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'catid' => $this->input->post('catid'),
				'featured' => $this->input->post('featured'),
				'title' => $this->input->post('title'),
				'alias' => $this->input->post('alias'),
				'created' => $this->input->post('created'),
				'access' => $this->input->post('access'),
				'hits' => $this->input->post('hits'),
				'fulltext' => $this->input->post('fulltext'),
				'images' => $this->input->post('images'),
				'urls' => $this->input->post('urls'),
				'metakey' => $this->input->post('metakey'),
				'metadesc' => $this->input->post('metadesc'),
				'metadata' => $this->input->post('metadata'),
            );
            
            $page_id = $this->Page_model->add_page($params);
            redirect('page/index');
        }
        else
        {            
            $data['_view'] = 'page/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a page
     */
    function edit($id)
    {   
        // check if the page exists before trying to edit it
        $data['page'] = $this->Page_model->get_page($id);
        
        if(isset($data['page']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('title','Title','required');
			$this->form_validation->set_rules('alias','Alias','required|is_unique[alias]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'catid' => $this->input->post('catid'),
					'featured' => $this->input->post('featured'),
					'title' => $this->input->post('title'),
					'alias' => $this->input->post('alias'),
					'created' => $this->input->post('created'),
					'access' => $this->input->post('access'),
					'hits' => $this->input->post('hits'),
					'fulltext' => $this->input->post('fulltext'),
					'images' => $this->input->post('images'),
					'urls' => $this->input->post('urls'),
					'metakey' => $this->input->post('metakey'),
					'metadesc' => $this->input->post('metadesc'),
					'metadata' => $this->input->post('metadata'),
                );

                $this->Page_model->update_page($id,$params);            
                redirect('page/index');
            }
            else
            {
                $data['_view'] = 'page/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The page you are trying to edit does not exist.');
    } 

    /*
     * Deleting page
     */
    function remove($id)
    {
        $page = $this->Page_model->get_page($id);

        // check if the page exists before trying to delete it
        if(isset($page['id']))
        {
            $this->Page_model->delete_page($id);
            redirect('page/index');
        }
        else
            show_error('The page you are trying to delete does not exist.');
    }
    
}
